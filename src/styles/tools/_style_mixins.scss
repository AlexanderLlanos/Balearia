// =============================================================================
// String Replace funcion
@function str-replace($string, $search, $replace: "") {
	$index: str-index($string, $search);
	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}
	@return $string;
}

// =============================================================================
/*
 * Font face importer, multiple file extensions
 * 
 * Usage info: https://gist.github.com/jonathantneal/d0460e5c2d5d7f9bc5e6
 * Usage example: 
 * Usage example: @include font-face(Samplinal, fonts/Samplinal, 500, normal, eot ttf);
 *
 */

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
	$src: null;

	$extmods: (
		eot: "?",
		svg: "#" + str-replace($name, " ", "_")
	);

	$formats: (
		otf: "opentype",
		ttf: "truetype"
	);

	@each $ext in $exts {
		$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
		$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
		$src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
	}

	@font-face {
		font-family: quote($name);
		font-style: $style;
		font-weight: $weight;
		src: $src;
	}
}


// =============================================================================
// Choose font and its weigh
@mixin set-font($name, $weight: normal) {
    font-family: $name;
    font-weight: $weight;
}

// =============================================================================
// Choose font character porperties
@mixin font-size($font-size, $line-height: normal, $letter-spacing: normal) {
    font-size: $font-size * 1px;

    @if $line-height==normal {
      line-height: normal;
    } @else {
      line-height: $line-height;
    }
  
    @if $letter-spacing==normal {
      letter-spacing: normal;
    } @else {
      letter-spacing: #{$letter-spacing}px;
    }
  
}

// =============================================================================
// Icons
@mixin set-icon($string-code, $color) {
  content: $string-code;
  color: $color;
}
@mixin pseudo-icon($string-code, $color, $position: before) {
  
  @if $position == "before" {
    &:before { @include set-icon($string-code, $color) }
  }
  @else if $position == "after" {
    &::after { @include set-icon($string-code, $color) }
  }
}

// =============================================================================
// Set color with transparency across browsers
@mixin rgba-bg($hex, $alpha, $ie: 0) {
    @if $ie == 1 {
      $rgba: rgba($hex, $alpha);
      $ie-hex-str: ie-hex-str($rgba);
      background-color: transparent;
      background-color: $rgba;
      filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#{$ie-hex-str},endColorstr=#{$ie-hex-str});
    }
    @else {
      background-color: $hex;
      background-color: rgba($hex, $alpha);
    }
  }

// =============================================================================
  @mixin opacity($opacity) {
    opacity: $opacity;
    $opacity-ie: $opacity * 100;
    filter: alpha(opacity=$opacity-ie); //IE8-
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity="+$opacity-ie+")"; //IE8+
  }


// =============================================================================
// Gradient using lists.
// Use example: 
// $list_white-to-black: #FFFFFF, #000000;
// @indlude gradient(right, $list_white-to-black);
// 
@mixin gradient($direction, $list) { 
  background: -webkit-linear-gradient($direction, $list);
  background: -moz-linear-gradient($direction, $list);
  background: -o-linear-gradient($direction, $list);
  background: linear-gradient($direction, $list);  
}
// =============================================================================
@mixin padding($top, $right, $bottom, $left) {
  padding-top: $top;
  padding-right: $right;
  padding-bottom: $bottom;
  padding-left: $left;
}
@mixin margin($top, $right, $bottom, $left) {
  margin-top: $top;
  margin-right: $right;
  margin-bottom: $bottom;
  margin-left: $left;
}

// =============================================================================
@mixin background-cover {
  background-repeat: no-repeat;
  background-size: cover;
  background-position: center;
}

// =============================================================================
@mixin cover-image($width, $height) {
  width: $width;
  height: $height;
  object-fit: cover;
}
@mixin contain-image($width, $height) {
  width: $width;
  height: $height;
  object-fit: contain;
}

// =============================================================================
// Locking width an height in a flex-box case (lock flex-basis)
@mixin flex-lock-width($width) {
  min-width: $width;
  max-width: $width;
}
@mixin flex-lock-height($height) {
  min-height: $height;
  max-height: $height;
}
@mixin flex-lock-sz($size) {
  min-width: $size;
  max-width: $size;
  min-height: $size;
  max-height: $size;
}

// =============================================================================
@mixin border-radius($radius) {
	border-radius: $radius;
	-webkit-border-radius: $radius;
	-moz-border-radius: $radius;
}


// =============================================================================
// Styles a solid rectangle, and displaces it to simulate a parallel shadow.
// * Z-index operations should be performed.
// $diplacement input values: top-left | top-right | bottom-left | bottom-right
@mixin solid-parallel-shadow-rect ($bg-color, $displacement, $direction, $width:100%, $height:100%) {
  width: $width;
  height: $height;
  background: $bg-color;
  opacity: .99;
  position: absolute;
  left: 0px;
  top: 0px;

  //Const variables for translate transformation.
  $x-axis-dir: 1;
  $y-axis-dir: 1;
  @if $direction == top-left {
    $x-axis-dir: -1;
    $y-axis-dir: -1;
  } @else if $direction == top-right {
    $y-axis-dir: -1;
  } @else if $direction == bottom-left {
    $x-axis-dir: -1;
  } @else {
    // Bottom right by default
    $x-axis-dir: 1;
    $y-axis-dir: 1;
  }

  transform: translate( #{$displacement * $x-axis-dir}px, #{$displacement * $y-axis-dir}px);

}